import csv
import os
import getpass
import platform
import matplotlib.pyplot as plt
from datetime import datetime

HUESPEDES_CSV = 'huespedes.csv'
RESERVAS_CSV = 'reservas.csv'
ADMIN_CSV = 'admin.csv'
LOG_FILE = 'log.txt'

TIPOS_HABITACION = {'estandar': 120000, 'suite': 250000}
HABITACIONES = {'estandar': list(range(1, 31)), 'suite': list(range(31, 41))}

def log_evento(accion):
    with open(LOG_FILE, 'a') as f:
        f.write(f"{datetime.now().isoformat()}|{getpass.getuser()}|{platform.system()}|{accion}\n")

def leer_csv(nombre):
    if not os.path.exists(nombre):
        return []
    with open(nombre, newline='', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        reader.fieldnames = [h.strip().replace('\ufeff', '') for h in reader.fieldnames]
        return list(reader)

def escribir_csv(nombre, datos, campos):
    with open(nombre, 'w', newline='', encoding='utf-8') as f: # Added encoding='utf-8'
        writer = csv.DictWriter(f, fieldnames=campos)
        writer.writeheader()
        writer.writerows(datos)

def agregar_csv(nombre, datos, campos):
    existe = os.path.exists(nombre)
    with open(nombre, 'a', newline='', encoding='utf-8') as f: # Added encoding='utf-8'
        writer = csv.DictWriter(f, fieldnames=campos)
        if not existe:
            writer.writeheader()
        writer.writerow(datos)

def validar_nombre(nombre):
    return nombre.isalpha() and len(nombre) >= 3

def validar_documento(doc):
    return doc.isdigit() and 3 <= len(doc) <= 15

def validar_correo(correo):
    return '@' in correo and '.' in correo.split('@')[-1]

def validar_telefono(tel):
    return tel.isdigit() and 7 <= len(tel) <= 15

def registrar_huesped():
    print("\n--- Registro de Huésped ---")
    nombre = input("Nombre: ")
    apellido = input("Apellido: ")
    doc = input("Documento: ")
    correo = input("Correo: ")
    tel = input("Teléfono: ")

    errores = []
    if not validar_nombre(nombre): errores.append("Nombre inválido")
    if not validar_nombre(apellido): errores.append("Apellido inválido")
    if not validar_documento(doc): errores.append("Documento inválido")
    if not validar_correo(correo): errores.append("Correo inválido")
    if not validar_telefono(tel): errores.append("Teléfono inválido")

    if errores:
        print("Errores:", *errores, sep='\n- ')
    else:
        agregar_csv(HUESPEDES_CSV, {
            'documento': doc,
            'nombre': nombre,
            'apellido': apellido,
            'correo': correo,
            'telefono': tel
        }, ['documento', 'nombre', 'apellido', 'correo', 'telefono'])
        print("Huésped registrado exitosamente.")
        log_evento("Registrar huésped")

def realizar_reserva():
    print("\n--- Realizar Reserva ---")
    doc = input("Documento del huésped: ")
    huespedes = leer_csv(HUESPEDES_CSV)
    if not any(h['documento'] == doc for h in huespedes):
        print("Huésped no registrado.")
        return

    tipo = input("Tipo de habitación (estandar/suite): ").lower()
    if tipo not in TIPOS_HABITACION:
        print("Tipo no válido.")
        return
    fecha_ingreso = input("Fecha de ingreso (YYYY-MM-DD): ")
    noches = int(input("Número de noches: "))
    disponibles = [h for h in HABITACIONES[tipo] if not any(r['habitacion'] == str(h) for r in leer_csv(RESERVAS_CSV) if r['tipo'] == tipo)]
    if not disponibles:
        print("No hay habitaciones disponibles.")
        return
    hab = disponibles[0]
    costo = TIPOS_HABITACION[tipo] * noches
    agregar_csv(RESERVAS_CSV, {
        'documento': doc,
        'tipo': tipo,
        'habitacion': hab,
        'ingreso': fecha_ingreso,
        'noches': noches,
        'costo': costo,
        'check_in': '',
        'check_out': ''
    }, ['documento', 'tipo', 'habitacion', 'ingreso', 'noches', 'costo', 'check_in', 'check_out'])
    print(f"Reserva confirmada. Habitación {hab}. Total: ${costo}")
    log_evento("Realizar reserva")

def registrar_ingreso():
    print("\n--- Registrar Ingreso (Check-In) ---")
    doc = input("Documento del huésped: ")
    reservas = leer_csv(RESERVAS_CSV)
    actualizado = False
    for r in reservas:
        if r['documento'] == doc and not r['check_in']:
            r['check_in'] = datetime.now().date().isoformat()
            actualizado = True
            print(f"Ingreso registrado para habitación {r['habitacion']}.")
            break
    if actualizado:
        escribir_csv(RESERVAS_CSV, reservas, reservas[0].keys())
        log_evento("Registrar ingreso")
    else:
        print("No hay reservas pendientes de ingreso para este huésped.")

def registrar_salida():
    print("\n--- Registrar Salida ---")
    doc = input("Documento del huésped: ")
    reservas = leer_csv(RESERVAS_CSV)
    actualizado = False
    for r in reservas:
        if r['documento'] == doc and not r['check_out']:
            r['check_out'] = datetime.now().date().isoformat()
            actualizado = True
            print(f"Factura - Total a pagar: ${r['costo']}\nGracias por su visita.")
            break
    if actualizado:
        escribir_csv(RESERVAS_CSV, reservas, reservas[0].keys())
        log_evento("Registrar salida")
    else:
        print("No se encontró reserva activa para este huésped.")

def login_admin():
    print("\n--- Módulo Administrativo ---")
    user = input("Usuario: ")
    pw = getpass.getpass("Contraseña: ")
    admins = leer_csv(ADMIN_CSV)
    if any(a['usuario'] == user and a['clave'] == pw for a in admins):
        print("Acceso permitido.\n")
        return True
    print("Acceso denegado.")
    return False

def datos_administrativos():
    if not login_admin(): return
    huespedes = leer_csv(HUESPEDES_CSV)
    reservas = leer_csv(RESERVAS_CSV)
    ocupadas = [r for r in reservas if not r['check_out']]
    disponibles = 40 - len(ocupadas)
    total_ingresos = sum(int(r['costo']) for r in reservas)
    print("\n--- Reportes ---")
    print(f"Total huéspedes registrados: {len(huespedes)}")
    print(f"Habitaciones ocupadas: {len(ocupadas)}")
    print(f"Habitaciones disponibles: {disponibles}")
    print(f"Ingresos totales: ${total_ingresos}")
    log_evento("Ver datos administrativos")

def graficar_datos():
    print("\n--- Generar Gráficos ---")
    reservas = leer_csv(RESERVAS_CSV)
    tipos = [r['tipo'] for r in reservas if not r['check_out']]
    estandar = tipos.count('estandar')
    suite = tipos.count('suite')

    # Gráfico de barras
    plt.bar(['Estándar', 'Suite'], [estandar, suite])
    plt.title('Habitaciones Ocupadas')
    plt.ylabel('Cantidad')
    plt.savefig('grafico1_barras.png')
    plt.clf()

    # Gráfico circular
    total = estandar + suite
    plt.pie([estandar, suite], labels=['Estándar', 'Suite'], autopct='%1.1f%%')
    plt.title('Distribución habitaciones ocupadas')
    plt.savefig('grafico2_pie.png')
    plt.clf()

    print("Gráficos generados y guardados como archivos PNG.")
    log_evento("Generar gráficos")

def menu():
    while True:
        print("""
=======================================
    Bienvenido al Hotel Maison 33
=======================================
1. Registrar huésped
2. Realizar reserva
3. Registrar Ingreso (check-In)
4. Registrar salida (Check-Out)
5. Administracion (Acceso Restringido)
6. Salir
=======================================
""")
        op = input("Seleccione una opción: ")
        if op == "1":
            registrar_huesped()
        elif op == "2":
            realizar_reserva()
        elif op == "3":
            registrar_ingreso()
        elif op == "4":
            registrar_salida()
        elif op == "5":
            datos_administrativos()
        elif op == "6":
            break
        else:
            print("Opción inválida.")

menu()
